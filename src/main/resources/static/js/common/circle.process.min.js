var CircleProcess = (function (c) {
    var a = "0.0.1";
    var b = function (d, e) {
        return new b.fn.init(d, e)
    };
    b.fn = b.prototype = {
        circleProcess: a,
        context: null,
        option: {},
        interVal: 0,
        constructor: b,
        init: function (d, e) {
            if (typeof d === "undefined") {
                throw new Error("Unable to get canvas object")
            }
            this.context = d.getContext("2d");
            this.option = this._option();
            this._getCanvasOption(d);
            this._getOption();
            if (typeof e === "object") {
                this._setOption(e);
                this._getOption()
            }
            this.interVal = setInterval(function () {
                this.run()
            }.bind(this), 20)
        },
        run: function () {
            var d = this.option;
            var e = d.process;
            if (d.percent > 100 || d.percent < 0) {
                clearInterval(this.interVal);
                alert("Percentage out of range,The correct range of 1 - 100");
                throw new Error("Percentage out of range,The correct range of 1 - 100")
            }
            if (e >= d.percent) {
                e = d.percent;
                clearInterval(this.interVal)
            }
            this._clear();
            if (d.backgroundCircle.show) {
                this._backgroundCircle()
            }
            if (d.percentCircle.show) {
                this._percentCircle(e)
            }
            if (d.startSmallCircle.show) {
                this._smallCircle(d.startSmallCircle.radius, "#06a8f3", 0)
            }
            if (d.endSmallCircle.show) {
                this._smallCircle(d.endSmallCircle.radius, "#00f8bb", e)
            }
            if (d.processText.show) {
                this._showProcess(e)
            }
            this._speed(d.percentCircle.speed)
        },
        _clear: function () {
            var d = this.option;
            this.context.clearRect(0, 0, d.backgroundCircle.roundX * 2, d.backgroundCircle.roundY * 2)
        },
        _backgroundCircle: function () {
            var d = this.option;
            this.context.lineWidth = d.lineWidth;
            this.context.beginPath();
            this.context.arc(d.backgroundCircle.roundX, d.backgroundCircle.roundY, d.radius, d.backgroundCircle.startAngle, d.backgroundCircle.endAngle);
            this.context.strokeStyle = d.backgroundCircle.color;
            this.context.stroke();
            this.context.closePath()
        },
        _percentCircle: function (e) {
            var d = this.option;
            this.context.beginPath();
            this.context.lineWidth = d.lineWidth;
            this.context.arc(d.backgroundCircle.roundX, d.backgroundCircle.roundY, d.radius, d.backgroundCircle.startAngle, d.backgroundCircle.startAngle + e / 100 * d.cMultiple, false);
            if (d.percentCircle.gradientColorShow) {
                this.context.strokeStyle = this._linearGradient()
            } else {
                this.context.strokeStyle = d.percentCircle.color
            }
            this.context.lineCap = "round";
            this.context.stroke();
            this.context.closePath()
        },
        _linearGradient: function () {
            var f = this.option;
            var i = f.backgroundCircle.roundX - f.radius - this.option.lineWidth;
            var d = f.backgroundCircle.roundX + f.radius + this.option.lineWidth;
            var g = f.backgroundCircle.roundY;
            var h = f.backgroundCircle.roundY;
            var e = this.context.createLinearGradient(i, g, d, h);
            e.addColorStop(0, "rgba(255,0,0,0.1)");
            e.addColorStop(0.2, "rgba(255,0,0,0.3)");
            e.addColorStop(0.4, "rgba(255,0,0,0.5)");
            e.addColorStop(0.6, "rgba(255,0,0,0.7)");
            e.addColorStop(0.8, "rgba(255,0,0,0.9)");
            e.addColorStop(1, "rgba(255,0,0,1)");
            return e
        },
        _smallCircle: function (e, f, h) {
            var g = this.option;
            var d = Math.cos(2 * Math.PI / 360 * (g.angle + h * g.sMultiple / 100)) * g.radius + g.backgroundCircle.roundX;
            var i = Math.sin(2 * Math.PI / 360 * (g.angle + h * g.sMultiple / 100)) * g.radius + g.backgroundCircle.roundY;
            this.context.beginPath();
            this.context.arc(d, i, e, 0, Math.PI * 2);
            this.context.lineWidth = 1;
            this.context.fillStyle = f;
            this.context.fill()
        },
        _showProcess: function (g) {
            var d = 0;
            var f = this.option;
            var e = f.percent.toString();
            if (/\./.test(e) && e.split(".")[1].length > 0) {
                d = e.split(".")[1].length < 2 ? 1 : 2
            }
            this.context.font = f.processText.fontSize + "px April";
            this.context.textAlign = f.processText.textAlign;
            this.context.textBaseline = f.processText.textBaseline;
            this.context.fillStyle = f.processText.color;
            //   君威修改         this.context.fillText(parseFloat(g).toFixed(d) + "%", f.backgroundCircle.roundX, f.backgroundCircle.roundY)
            this.context.fillText(parseFloat(g).toFixed(d) + "分", f.backgroundCircle.roundX, f.backgroundCircle.roundY)
        },
        _showProcessFollow: function () {
        },
        _speed: function (e) {
            var d = this.option;
            if (e === "gradient") {
                if (d.process / d.percent > 0.9) {
                    d.process += 0.3
                } else {
                    if (d.process / d.percent > 0.8) {
                        this.option.process += 0.55
                    } else {
                        if (d.process / d.percent > 0.7) {
                            d.process += 0.75
                        } else {
                            d.process += 1
                        }
                    }
                }
            } else {
                if (e === "normal") {
                    d.process += 1
                } else {
                    if (e === "fast") {
                        d.process += 2.5
                    }
                }
            }
        },
        _getCanvasOption: function (d) {
            this._extend(this.option, {
                backgroundCircle: {
                    roundX: d.width / 2,
                    roundY: d.height / 2,
                    startAngle: Math.PI / 180 * 180,
                    endAngle: Math.PI / 180 * 180 * 2
                }
            })
        },
        _extend: function (e, f) {
            for (var d in f) {
                if (typeof f[d] === "object") {
                    this._extend(e[d], f[d])
                } else {
                    if (f.hasOwnProperty(d) && (!e.hasOwnProperty(d))) {
                        e[d] = f[d]
                    } else {
                        if (f.hasOwnProperty(d) && e.hasOwnProperty(d)) {
                            e[d] = f[d]
                        }
                    }
                }
            }
        },
        _getOption: function () {
            var d = this.option;
            d.angle = 180;
            d.cMultiple = d.backgroundCircle.startAngle;
            d.sMultiple = 180;
            if (d.size === "complete") {
                d.angle = 120;
                d.cMultiple = d.backgroundCircle.startAngle * 2;
                d.sMultiple = 360;
                this._extend(this.option, {
                    backgroundCircle: {
                        startAngle: Math.PI / 180 * 120,
                        endAngle: Math.PI / 180 * 120 * 4
                    }
                })
            } else {
                if (d.size === "incomplete") {
                    d.angle = 120;
                    d.cMultiple = Math.PI * 5 / 3;
                    d.sMultiple = 300;
                    this._extend(this.option, {
                        backgroundCircle: {
                            startAngle: Math.PI / 180 * 120,
                            endAngle: Math.PI / 180 * 420
                        }
                    })
                }
            }
        },
        _setOption: function (d) {
            this._extend(this.option, d)
        },
        _option: function () {
            return {
                size: "half",
                lineWidth: 5,
                radius: 100,
                percent: 80,
                process: 0,
                backgroundCircle: {show: true, color: "#eee", roundX: 0, roundY: 0, startAngle: 0, endAngle: 0},
                percentCircle: {
                    show: true,
                    color: "#f00",
                    speed: "gradient",
                    gradientColorShow: false,
                    gradientColor: "rgba(255.0.0,0.1)"
                },
                startSmallCircle: {show: false, color: "#06a8f3", radius: 5},
                endSmallCircle: {show: false, color: "#00f8bb", radius: 5},
                gradient: {color: "rgba(255,0,0,0.1)", size: 4},
                processText: {
                    show: true,
                    fontSize: 20,
                    color: "#ccc",
                    follow: false,
                    textAlign: "center",
                    textBaseline: "alphabetic"
                }
            }
        }
    };
    b.fn.init.prototype = b.fn;
    return b
})();